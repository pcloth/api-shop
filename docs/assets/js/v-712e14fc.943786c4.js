(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[681],{8044:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-712e14fc",path:"/introduction/",title:"",lang:"zh-CN",frontmatter:{prev:{text:"首页",link:"/"},next:{text:"快速上手",link:"/start/"},lastUpdated:!0},excerpt:"",headers:[{level:2,title:"介绍",slug:"介绍",children:[{level:3,title:"它是如何工作的？",slug:"它是如何工作的",children:[]}]},{level:2,title:"生命周期",slug:"生命周期",children:[{level:3,title:"钩子的使用",slug:"钩子的使用",children:[]},{level:3,title:"钩子例子",slug:"钩子例子",children:[]},{level:3,title:"before_running 运行前",slug:"before-running-运行前",children:[]},{level:3,title:"after_running 运行后",slug:"after-running-运行后",children:[]}]}],filePathRelative:"introduction/README.md",git:{updatedTime:1624611183e3}}},7101:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h2 id="介绍"><a class="header-anchor" href="#介绍">#</a> 介绍</h2><p>api-shop是一个python库，它用来帮助使用django、flask或者bottle作为web框架的开发者，快速的进行restful-api开发。</p><h3 id="它是如何工作的"><a class="header-anchor" href="#它是如何工作的">#</a> 它是如何工作的？</h3><p>api-shop并不会直接接管web框架的路由控制器，它需要你在web框架的路由控制器中添加一个正则路由，并指向api-shop实例入口</p><p>比如，在<code>Flask</code>中，我们需要你这样引入</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> api_shop <span class="token keyword">from</span> ApiShop\n\naf <span class="token operator">=</span> ApiShop<span class="token punctuation">(</span>\n    conf<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    options<span class="token operator">=</span><span class="token punctuation">{</span>\n        <span class="token string">&#39;lang&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;zh&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;framework&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;flask&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\n<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/api/&lt;regex(&quot;([\\s\\S]*)&quot;):url&gt;&#39;</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DELETE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PATCH&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> url <span class="token operator">==</span> <span class="token string">&#39;document/&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> af<span class="token punctuation">.</span>render_documents<span class="token punctuation">(</span>request<span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> url <span class="token operator">==</span> <span class="token string">&#39;api_data&#39;</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> af<span class="token punctuation">.</span>get_api_data<span class="token punctuation">(</span>request<span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> af<span class="token punctuation">.</span>api_entry<span class="token punctuation">(</span>request<span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>其中，<code>document/</code>这个路由是可以修改的，<code>api_data</code>这个路由确是需要固定的，它是为了默认的文档工具能够拿到接口数据。除非你自己重写文档页面。</p></div><h2 id="生命周期"><a class="header-anchor" href="#生命周期">#</a> 生命周期</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>让你更加的专注到业务上，其他的事情交给api-shop</p></div><p><img src="/api-shop.png" alt="An image"></p><h3 id="钩子的使用"><a class="header-anchor" href="#钩子的使用">#</a> 钩子的使用</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>我们提供了before_running和after_running两个钩子，你只需要继承ApiShop并复写它们就可以使用 钩子函数可以返回一个response来替代原本将要返回的对象。</p></div><h3 id="钩子例子"><a class="header-anchor" href="#钩子例子">#</a> 钩子例子</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CommonApi</span><span class="token punctuation">(</span>ApiShop<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">before_running</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行前钩子&#39;</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&#39;addroute/mock&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;您没有权限&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">)</span>\n    <span class="token keyword">def</span> <span class="token function">after_running</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行后钩子&#39;</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>\n\naf <span class="token operator">=</span> CommonApi<span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;framework&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;lang&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;zh&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="before-running-运行前"><a class="header-anchor" href="#before-running-运行前">#</a> before_running 运行前</h3><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>request</td><td>请求实例</td><td>用户提交的请求实例</td></tr><tr><td>data</td><td>请求参数对象(该对象继承于dict)</td><td>ApiShop把请求参数解析后的数据对象，支持data.name的方法访问参数</td></tr><tr><td>model</td><td>继承于Api类的业务对象</td><td>接口将要调用的Api类</td></tr><tr><td>key</td><td>str</td><td>用户当前引用到的url参数（在conf配置中的url参数）</td></tr></tbody></table><h3 id="after-running-运行后"><a class="header-anchor" href="#after-running-运行后">#</a> after_running 运行后</h3><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>request</td><td>请求实例</td><td>用户提交的请求实例</td></tr><tr><td>response</td><td>response对象</td><td>Api业务代码执行后，即将返回给用户的response对象</td></tr><tr><td>model</td><td>继承于Api类的业务对象</td><td>接口调用的Api类</td></tr><tr><td>key</td><td>str</td><td>用户当前引用到的url参数（在conf配置中的url参数）</td></tr></tbody></table>',18),p={render:function(n,s){return t}}}}]);