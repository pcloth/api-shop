(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[494],{4815:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-093e9b42",path:"/components/Api.html",title:"Api类",lang:"zh-CN",frontmatter:{title:"Api类"},excerpt:"",headers:[{level:2,title:"Api类",slug:"api类",children:[]},{level:2,title:"例子",slug:"例子",children:[]},{level:2,title:"methods类方法",slug:"methods类方法",children:[{level:3,title:"传入的 request 说明",slug:"传入的-request-说明",children:[]},{level:3,title:"传入的 data 说明",slug:"传入的-data-说明",children:[]}]},{level:2,title:"response_docs返回值文档",slug:"response-docs返回值文档",children:[]},{level:2,title:"ApiResponseModelFields",slug:"apiresponsemodelfields",children:[{level:3,title:"response_docs在文档中的表现",slug:"response-docs在文档中的表现",children:[]}]}],filePathRelative:"components/Api.md",git:{updatedTime:1624630892e3}}},1611:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>p});const e=(0,a(6252).uE)('<h2 id="api类"><a class="header-anchor" href="#api类">#</a> Api类</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>api业务代码父类，你写的业务代码都要继承它。</p></div><h2 id="例子"><a class="header-anchor" href="#例子">#</a> 例子</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> api_shop <span class="token keyword">import</span> Api<span class="token punctuation">,</span> ApiResponseModelFields\n\n<span class="token keyword">class</span> <span class="token class-name">api_login</span><span class="token punctuation">(</span>Api<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">&quot;&quot;&quot;用户账号登陆，这里的文字会被加载到文档里&quot;&quot;&quot;</span>\n    response_docs <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token comment"># 这个response_docs将会在文档中生成返回值说明文档</span>\n        <span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>\n            <span class="token string">&#39;results&#39;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>PartyData<span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;test&#39;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>\n                ApiResponseModelFields<span class="token punctuation">(</span>PartyData<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>PartyData<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 使用部分字段，django必须使用这个类包裹才能引入部分字段，flask则可以直接使用字段名</span>\n                <span class="token string">&#39;photos:Array:照片数据&#39;</span> <span class="token comment"># 手写字段文档</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token string">&#39;user_party_info&#39;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>PartyUsers<span class="token punctuation">,</span><span class="token string">&#39;photos:Array:照片数据&#39;</span><span class="token punctuation">}</span> <span class="token comment"># PartyUsers模型的全部字段叠加部分其他字段</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">&#39;&#39;&#39;这是request的get方法&#39;&#39;&#39;</span>\n        <span class="token keyword">return</span> \n\n    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">&quot;&quot;&quot; \n        这是request的post方法\n        data.username # 用户名\n        data.ddd # 日期\n        &quot;&quot;&quot;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;登陆成功&#39;</span><span class="token punctuation">}</span>\n\n    <span class="token keyword">def</span> <span class="token function">patch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">&#39;&#39;&#39;这是request的patch方法&#39;&#39;&#39;</span>\n        <span class="token keyword">return</span> \n    \n    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">&#39;&#39;&#39;这是request的delete方法&#39;&#39;&#39;</span>\n        <span class="token keyword">return</span> \n    \n    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">&#39;&#39;&#39;这是request的put方法&#39;&#39;&#39;</span>\n        <span class="token keyword">return</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">返回值</p><ul><li>返回值可以为None，前端会收到一个200状态的空响应，例如 return None</li><li>也可以指定状态码，比如 return {&#39;msg&#39;:&#39;错误信息&#39;}, 400</li><li>当然也可以直接返回其他数据 return 1 前端会收到一个body内容为1的响应</li></ul></div><h2 id="methods类方法"><a class="header-anchor" href="#methods类方法">#</a> methods类方法</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>get 方法，对应的是request的<code>get</code> method</li><li>post 方法，对应的是request的<code>post</code> method</li><li>patch 方法，对应的是request的<code>patch</code> method</li><li>delete 方法，对应的是request的<code>delete</code> method</li><li>put 方法，对应的是request的<code>put</code> method</li></ol></div><h3 id="传入的-request-说明"><a class="header-anchor" href="#传入的-request-说明">#</a> 传入的 request 说明</h3><blockquote><ul><li>正常情况下，传入的request就是当前请求的reqeust</li></ul></blockquote><h3 id="传入的-data-说明"><a class="header-anchor" href="#传入的-data-说明">#</a> 传入的 data 说明</h3><blockquote><ul><li>data对象就是校验转换后的参数dict，数据内容可以通过属性访问，例如：data.name</li></ul></blockquote><h2 id="response-docs返回值文档"><a class="header-anchor" href="#response-docs返回值文档">#</a> response_docs返回值文档</h2><p>这个response_docs将会在文档中生成返回值说明文档</p><blockquote><p>它的第一层是一个dict字典，key为method名。 第二层开始就是描述返回值的说明，可以直接使用orm的model类对象。 也可以使用ApiResponseModelFields类方法来包裹ORM的Model类，并描述需要的部分字段 甚至你可以使用用冒号分割的一个字符串描述<code>&#39;photos:Array:照片数据&#39;</code> # 手写字段文档</p></blockquote><h2 id="apiresponsemodelfields"><a class="header-anchor" href="#apiresponsemodelfields">#</a> ApiResponseModelFields</h2><p>这个类可以捕捉ORM的数据模型里面的字段和描述信息，用来生成返回值文档</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>ApiResponseModelFields<span class="token punctuation">(</span>Model<span class="token punctuation">,</span>List<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>ApiResponseModelFields初始化需要两个参数。 Model为你需要引用的ORM数据模型 List是包含了需要返回字段的列表，列表中可以是字符串key，也可以是Model.key （key为字段名）</p></div><h3 id="response-docs在文档中的表现"><a class="header-anchor" href="#response-docs在文档中的表现">#</a> response_docs在文档中的表现</h3><p><img src="/responseDocs.png" alt="response_docs"></p>',20),p={render:function(s,n){return e}}}}]);