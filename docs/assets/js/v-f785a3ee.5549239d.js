(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[18],{1143:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-f785a3ee",path:"/components/ApiShop.html",title:"ApiShop类",lang:"zh-CN",frontmatter:{title:"ApiShop类"},excerpt:"",headers:[{level:2,title:"初始化",slug:"初始化",children:[{level:3,title:"ApiShop 接口配置(conf)",slug:"apishop-接口配置-conf",children:[]},{level:3,title:"ApiShop 设置参数(options)",slug:"apishop-设置参数-options",children:[]}]},{level:2,title:"业务代码入口",slug:"业务代码入口",children:[]},{level:2,title:"调用其他接口",slug:"调用其他接口",children:[]},{level:2,title:"执行前钩子",slug:"执行前钩子",children:[]},{level:2,title:"执行后钩子",slug:"执行后钩子",children:[{level:3,title:"钩子例子",slug:"钩子例子",children:[]}]},{level:2,title:"路由装饰器",slug:"路由装饰器",children:[]}],filePathRelative:"components/ApiShop.md",git:{updatedTime:1624630892e3}}},8144:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h2 id="初始化"><a class="header-anchor" href="#初始化">#</a> 初始化</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>api-shop 核心类，实例化后生成接口对象，你只需要访问实例的方法，就可以调用相应的业务代码。</p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>ap <span class="token operator">=</span> ApiShop<span class="token punctuation">(</span>conf<span class="token punctuation">,</span>options<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="apishop-接口配置-conf"><a class="header-anchor" href="#apishop-接口配置-conf">#</a> ApiShop 接口配置(conf)</h3><table><thead><tr><th>键</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>url</td><td>str/list</td><td>接口访问的 url，支持 list 包裹多个 url，也支持&lt;参数名&gt;模式，url 中添加&lt;参数名&gt;的话，方法参数列表中必须要包含该参数，并指定<code>required=True</code></td><td><code>login</code>,<code>user/&lt;id&gt;</code></td></tr><tr><td>class</td><td>str/Class 对象</td><td>为字符串时，是<code>Api接口继承对象</code>的路径，为对象时就是该<code>Api接口继承对象</code></td><td>account.views.api_login</td></tr><tr><td>methods</td><td>dict</td><td>这个对象包含了每个接口可以接受的方法和参数</td><td>key 可以为 GET/POST/PUT/PATCH/PUT/DELETE 等 http 支持的方法</td></tr></tbody></table><h4 id="methods-配置说明"><a class="header-anchor" href="#methods-配置说明">#</a> methods 配置说明</h4><div class="custom-container tip"><p class="custom-container-title">在配置参数中或者@add_api 类装饰器添加</p><p>单个 methods 的 value 为一个 list 对象，其中描述了该方法支持的参数</p></div><table><thead><tr><th>键</th><th>类型</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>name</td><td>str</td><td>参数名字</td><td>username</td></tr><tr><td>type</td><td>object</td><td>参数类型，目前支持 int，float，list，dict，set，tuple，bool，也支持自定义类型和其他可以被转换的类型</td><td>详情可以查看 data_format 扩展</td></tr><tr><td>required</td><td>bool</td><td>是否必要参数，如果为 True，用户请求中没有该参数将会被拦截</td><td>缺省为<code>False</code></td></tr><tr><td>min</td><td>int</td><td>参数的最小值(int)或者最小长度(str/list/set/tuple)，用户提交小于或者短于这个值的参数，将会被拦截</td><td>5</td></tr><tr><td>max</td><td>int</td><td>参数的最大值(int)或者最大长度(str/list/set/tuple)，用户提交大于或者超过长度的参数，将会被拦截</td><td>5</td></tr><tr><td>default</td><td><code>同类型参数</code>、<code>方法</code>、<code>类</code></td><td>比如 type=int 的一个参数，default=1 的时候，用户如果不提交参数，将会自动填充 1，如果 default 为一个方法或者类，将会自动填充<code>运行</code>/<code>实例化</code>结果</td><td></td></tr><tr><td>options</td><td>list</td><td>这是参数的可选项，用户提交的参数必须在可选项中，否则将会被拦截</td><td>options=[&#39;a&#39;,&#39;c&#39;] 表示用户只能提交该参数的值为 a 或者 c</td></tr><tr><td>description</td><td>str</td><td>参数的描述，用来给前端开发人员的参考说明</td><td></td></tr></tbody></table><h3 id="apishop-设置参数-options"><a class="header-anchor" href="#apishop-设置参数-options">#</a> ApiShop 设置参数(options)</h3><table><thead><tr><th>参数名称</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>base_url</td><td>str</td><td>/api/</td><td>基础 url，用以组合给前端的 api url</td></tr><tr><td>bad_request</td><td>bool</td><td>True</td><td>参数 bad_request 如果是真，发生错误返回一个坏请求给前端，否则都返回 200 的 response，里面附带 status=error 和 msg 附带错误信息</td></tr><tr><td>bad_request_error_status</td><td>str</td><td>&#39;error&#39;</td><td>默认的 bad_request 状态信息，bad_request=False 生效</td></tr><tr><td>document</td><td>str</td><td>document.html</td><td>文档模板绝对路径</td></tr><tr><td>lang</td><td>str</td><td>en</td><td>ApiShop 的语言，默认为 en 英文，可选项为 zh 中文</td></tr><tr><td>debug</td><td>bool</td><td>True</td><td>是否开启调试信息</td></tr><tr><td>auto_create_folder</td><td>bool</td><td>False</td><td>自动创建文件夹（实验方法）</td></tr><tr><td>auto_create_file</td><td>bool</td><td>False</td><td>自动创建文件（实验方法）</td></tr><tr><td>auto_create_class</td><td>bool</td><td>False</td><td>自动创建类（实验方法）</td></tr><tr><td>auto_create_method</td><td>bool</td><td>False</td><td>自动创建方法（实验方法）</td></tr></tbody></table><h2 id="业务代码入口"><a class="header-anchor" href="#业务代码入口">#</a> 业务代码入口</h2><div class="custom-container tip"><p class="custom-container-title">实例方法 api_entry</p><p>实例化 ApiShop 类之后，需要在 web 框架的路由中添加一个正则路由，好让 api 开头的路由，全部被 ApiShop 接管。</p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>ap <span class="token operator">=</span> ApiShop<span class="token punctuation">(</span>conf<span class="token punctuation">,</span>options<span class="token punctuation">)</span>\n\napp_name<span class="token operator">=</span><span class="token string">&#39;api&#39;</span>\n\nurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>\n    path<span class="token punctuation">(</span><span class="token string">&#39;api_data&#39;</span><span class="token punctuation">,</span> ap<span class="token punctuation">.</span>get_api_data<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;api_data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># api文档需要的接口</span>\n    path<span class="token punctuation">(</span><span class="token string">&#39;document/&#39;</span><span class="token punctuation">,</span> ap<span class="token punctuation">.</span>render_documents<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;document&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#api文档渲染的路由</span>\n    re_path<span class="token punctuation">(</span><span class="token string">r&#39;([\\s\\S]*)&#39;</span><span class="token punctuation">,</span> ap<span class="token punctuation">.</span>api_entry<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 接管api/下面其他的全部路由到api_entry入口方法</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="调用其他接口"><a class="header-anchor" href="#调用其他接口">#</a> 调用其他接口</h2><div class="custom-container tip"><p class="custom-container-title">实例方法 api_run</p><p>从 1.12.0 版本开始，ApiShop 核心类提供了一个 api_run 的方法，用来在代码中运行另外一个 api 代码，方便复用。 这个方法将取代原本的 get_api_result_json 和 get_api_result_response</p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;\n    request   直接传入当前request，\n    url       就是你想要访问的接口url\n    method    如果不传入，就是 = request.method\n    parameter 请求参数，如果不传入，就没有参数传入到api中\n    json      默认True返回json数据，False就会返回response\n&#39;&#39;&#39;</span>\nresponse_json<span class="token punctuation">,</span>code <span class="token operator">=</span> ap<span class="token punctuation">.</span>api_run<span class="token punctuation">(</span>request<span class="token punctuation">,</span> url<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> parameter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="执行前钩子"><a class="header-anchor" href="#执行前钩子">#</a> 执行前钩子</h2><p>before_running</p><h2 id="执行后钩子"><a class="header-anchor" href="#执行后钩子">#</a> 执行后钩子</h2><p>after_running</p><h3 id="钩子例子"><a class="header-anchor" href="#钩子例子">#</a> 钩子例子</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CommonApi</span><span class="token punctuation">(</span>ApiShop<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">before_running</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行前钩子&#39;</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&#39;addroute/mock&#39;</span><span class="token punctuation">:</span>\n            <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;您没有权限&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">)</span>\n    <span class="token keyword">def</span> <span class="token function">after_running</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行后钩子&#39;</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>\n\naf <span class="token operator">=</span> CommonApi<span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;framework&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;lang&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;zh&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="路由装饰器"><a class="header-anchor" href="#路由装饰器">#</a> 路由装饰器</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在 Api 继承对象前使用 @add_api 类装饰器添加路由和参数，这样就无须使用 conf 集中配置文件</p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token decorator annotation punctuation">@af<span class="token punctuation">.</span>add_api</span><span class="token punctuation">(</span>\n    name<span class="token operator">=</span><span class="token string">&#39;装饰器模式接口&#39;</span><span class="token punctuation">,</span>\n    url<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;addroute/mock/&lt;username&gt;&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;addroute/test&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    methods<span class="token operator">=</span><span class="token punctuation">{</span>\n        <span class="token string">&#39;GET&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span>\n            <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;required&#39;</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;type&#39;</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token string">&#39;min&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;max&#39;</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">&#39;description&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">ApiMockTest</span><span class="token punctuation">(</span>Api<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',25),p={render:function(n,s){return t}}}}]);