(self.webpackChunkdocuments=self.webpackChunkdocuments||[]).push([[96],{9241:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-4822d271",path:"/components/SingleApiShop.html",title:"SingleApiShop类",lang:"zh-CN",frontmatter:{title:"SingleApiShop类"},excerpt:"",headers:[{level:2,title:"初始化",slug:"初始化",children:[]},{level:2,title:"在其他地方引入",slug:"在其他地方引入",children:[]}],filePathRelative:"components/SingleApiShop.md",git:{updatedTime:null}}},5040:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="初始化"><a class="header-anchor" href="#初始化">#</a> 初始化</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>继承自 ApiShop 类，和它的功能一样，唯一区别就是 SingleApiShop 是一个全局单例类，不但保持单例，多次继承也可以保持最后一次单例</p><p><code>推荐只需要单例的项目中使用SingleApiShop代替ApiShop初始化</code></p></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> api_shop <span class="token keyword">import</span> SingleApiShop\n\n<span class="token keyword">class</span> <span class="token class-name">GeteWayApi</span><span class="token punctuation">(</span>SingleApiShop<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">before_running</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行前钩子&#39;</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>\n    <span class="token keyword">def</span> <span class="token function">after_running</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;运行后钩子&#39;</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">)</span>\n\nap <span class="token operator">=</span> GeteWayApi<span class="token punctuation">(</span>conf<span class="token punctuation">,</span>options<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="在其他地方引入"><a class="header-anchor" href="#在其他地方引入">#</a> 在其他地方引入</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>from api_shop import SingleApiShop\n\n# 可以获得的GeteWayApi的实例ap，方便在其他代码中调用api接口\napi_instance = SingleApiShop.get_single_apishop()\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',5),e={render:function(n,s){return p}}}}]);